{
  "hash": "1ad346045f2ebcfd588b36e3b4640832",
  "result": {
    "markdown": "---\ntitle: \"Classification\"\ndescription: \"ML assignment blog 3\"\ndate: 2023-12-02\ncategories: [Machine Learning] \ndraft: false\n---\n\n\nIn this blog regarding classification algorithms, we will see about the multiclass random forest model using penguins data. Based on certain features of penguins will try to train a multiclass random forest model and predict the penguin species.\n\n## 1. Required libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──\n✔ broom        1.0.5     ✔ rsample      1.2.0\n✔ dials        1.2.0     ✔ tune         1.1.2\n✔ infer        1.0.5     ✔ workflows    1.1.3\n✔ modeldata    1.2.0     ✔ workflowsets 1.0.1\n✔ parsnip      1.1.1     ✔ yardstick    1.2.0\n✔ recipes      1.0.8     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Use tidymodels_prefer() to resolve common conflicts.\n```\n:::\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'palmerpenguins'\n\nThe following object is masked from 'package:modeldata':\n\n    penguins\n```\n:::\n\n```{.r .cell-code}\ndata(\"penguins\")\n```\n:::\n\n\n## 2. Check data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n\n```{.r .cell-code}\n#Separate the species\n\npenguins %>% select(species) %>% unique()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 1\n  species  \n  <fct>    \n1 Adelie   \n2 Gentoo   \n3 Chinstrap\n```\n:::\n\n```{.r .cell-code}\nlevels(penguins$species)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Adelie\"    \"Chinstrap\" \"Gentoo\"   \n```\n:::\n:::\n\n\n## 3. Create data for modelling\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#remove year feature and na's from the data\n\ndata_df = penguins %>% drop_na()\n\nhead(data_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           36.7          19.3               193        3450\n5 Adelie  Torgersen           39.3          20.6               190        3650\n6 Adelie  Torgersen           38.9          17.8               181        3625\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n\n```{.r .cell-code}\nGGally::ggpairs(data_df, aes(color = species))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## 4. Split training and testing data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_split <- initial_split(data_df, strata = species)\ndata_train <- training(data_split)\ndata_test <- testing(data_split)\ndata_split\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<Training/Testing/Total>\n<249/84/333>\n```\n:::\n:::\n\n\n## 5. Define model\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### Define Random Forest Model\nrf_spec <- rand_forest(trees = 1000,\n                       mtry = tune(),\n                       min_n = tune()) %>% \n  set_mode(\"classification\") %>% \n  set_engine(\"ranger\")\nrf_spec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRandom Forest Model Specification (classification)\n\nMain Arguments:\n  mtry = tune()\n  trees = 1000\n  min_n = tune()\n\nComputational engine: ranger \n```\n:::\n:::\n\n\n## 6. Cross validation data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### Cross Validation Sets to tune RF\ndata_cv <- vfold_cv(data_df, strata = species)\ndata_cv\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#  10-fold cross-validation using stratification \n# A tibble: 10 × 2\n   splits           id    \n   <list>           <chr> \n 1 <split [299/34]> Fold01\n 2 <split [299/34]> Fold02\n 3 <split [299/34]> Fold03\n 4 <split [299/34]> Fold04\n 5 <split [299/34]> Fold05\n 6 <split [299/34]> Fold06\n 7 <split [300/33]> Fold07\n 8 <split [300/33]> Fold08\n 9 <split [301/32]> Fold09\n10 <split [302/31]> Fold10\n```\n:::\n:::\n\n\n## 7. workflow\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### Add formula and model together with workflow\ntune_wf <- workflow() %>% \n  add_formula(species ~ .) %>% \n  add_model(rf_spec)\ntune_wf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Formula\nModel: rand_forest()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\nspecies ~ .\n\n── Model ───────────────────────────────────────────────────────────────────────\nRandom Forest Model Specification (classification)\n\nMain Arguments:\n  mtry = tune()\n  trees = 1000\n  min_n = tune()\n\nComputational engine: ranger \n```\n:::\n:::\n\n\n## 8. Tune Hyperparameters\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### Tune HyperParameters\nrf_tune <- tune_grid(\n  tune_wf,\n  resamples = data_cv,\n  control = control_resamples(save_pred = TRUE),\n  grid = 20\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ni Creating pre-processing data to finalize unknown parameter: mtry\n```\n:::\n\n```{.r .cell-code}\nrf_tune\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Tuning results\n# 10-fold cross-validation using stratification \n# A tibble: 10 × 5\n   splits           id     .metrics          .notes           .predictions      \n   <list>           <chr>  <list>            <list>           <list>            \n 1 <split [299/34]> Fold01 <tibble [40 × 6]> <tibble [0 × 3]> <tibble [680 × 9]>\n 2 <split [299/34]> Fold02 <tibble [40 × 6]> <tibble [0 × 3]> <tibble [680 × 9]>\n 3 <split [299/34]> Fold03 <tibble [40 × 6]> <tibble [0 × 3]> <tibble [680 × 9]>\n 4 <split [299/34]> Fold04 <tibble [40 × 6]> <tibble [0 × 3]> <tibble [680 × 9]>\n 5 <split [299/34]> Fold05 <tibble [40 × 6]> <tibble [0 × 3]> <tibble [680 × 9]>\n 6 <split [299/34]> Fold06 <tibble [40 × 6]> <tibble [0 × 3]> <tibble [680 × 9]>\n 7 <split [300/33]> Fold07 <tibble [40 × 6]> <tibble [0 × 3]> <tibble [660 × 9]>\n 8 <split [300/33]> Fold08 <tibble [40 × 6]> <tibble [0 × 3]> <tibble [660 × 9]>\n 9 <split [301/32]> Fold09 <tibble [40 × 6]> <tibble [0 × 3]> <tibble [640 × 9]>\n10 <split [302/31]> Fold10 <tibble [40 × 6]> <tibble [0 × 3]> <tibble [620 × 9]>\n```\n:::\n\n```{.r .cell-code}\nrf_tune %>% autoplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## 9. predictions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_tune %>% collect_predictions() %>% conf_mat(.pred_class, species )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           Truth\nPrediction  Adelie Chinstrap Gentoo\n  Adelie      2842        73      5\n  Chinstrap     78      1282      0\n  Gentoo         0         5   2375\n```\n:::\n:::\n\n\n## 10. ROC curves\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### ROC curves for 3 classes\nrf_tune %>% \n  collect_predictions() %>% \n  group_by(id) %>% \n  roc_curve(species, .pred_Adelie:.pred_Gentoo) %>% \n  autoplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n### Finalize Model according to accuracy\nrf_final <- finalize_model(\n  rf_spec,\n  rf_tune %>% select_best(\"accuracy\")\n)\nrf_final\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRandom Forest Model Specification (classification)\n\nMain Arguments:\n  mtry = 4\n  trees = 1000\n  min_n = 2\n\nComputational engine: ranger \n```\n:::\n\n```{.r .cell-code}\n### Testing Data\nfinal_res <- workflow() %>% \n  add_formula(species ~ .)%>%\n  add_model(rf_final) %>%\n  last_fit(data_split)\n\n\n### Metrics on Test data\nfinal_res %>% collect_metrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n  .metric  .estimator .estimate .config             \n  <chr>    <chr>          <dbl> <chr>               \n1 accuracy multiclass     0.964 Preprocessor1_Model1\n2 roc_auc  hand_till      0.998 Preprocessor1_Model1\n```\n:::\n\n```{.r .cell-code}\nfinal_res %>% collect_predictions() %>% conf_mat(.pred_class, species )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           Truth\nPrediction  Adelie Chinstrap Gentoo\n  Adelie        35         2      0\n  Chinstrap      1        16      0\n  Gentoo         0         0     30\n```\n:::\n\n```{.r .cell-code}\nfinal_prod <- workflow() %>% \n  add_formula(species ~ .)%>%\n  add_model(rf_final) %>%\n  fit(data_df)\n\n\nfinal_prod\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Formula\nModel: rand_forest()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\nspecies ~ .\n\n── Model ───────────────────────────────────────────────────────────────────────\nRanger result\n\nCall:\n ranger::ranger(x = maybe_data_frame(x), y = y, mtry = min_cols(~4L,      x), num.trees = ~1000, min.node.size = min_rows(~2L, x),      num.threads = 1, verbose = FALSE, seed = sample.int(10^5,          1), probability = TRUE) \n\nType:                             Probability estimation \nNumber of trees:                  1000 \nSample size:                      333 \nNumber of independent variables:  7 \nMtry:                             4 \nTarget node size:                 2 \nVariable importance mode:         none \nSplitrule:                        gini \nOOB prediction error (Brier s.):  0.01537413 \n```\n:::\n:::\n\n\n## 11. Variable importance\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(vip)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'vip'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:utils':\n\n    vi\n```\n:::\n\n```{.r .cell-code}\nrf_final %>%\n  set_engine(\"ranger\", importance = \"permutation\") %>%\n  fit(species ~ . ,\n      data = data_df\n  ) %>%\n  vip(geom = \"col\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}