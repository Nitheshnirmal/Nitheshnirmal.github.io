{
  "hash": "e8cd94d5151a5dee0cc0783e7f206812",
  "result": {
    "markdown": "---\ntitle: \"Regression\"\ndescription: \"ML assignment blog 4\"\ndate: 2023-12-02\ncategories: [Machine Learning] \ndraft: false\n---\n\n\nIn this blog, we'll use the GLM to perform simple linear regression. Below,you will find me using mtcars data for fitting a linear regression model between the variables weight and miles per gallon for car dataset.\n\n## 1. Simple linear regression\n\n-   **Definition:** Simple linear regression involves predicting a dependent variable (response) based on a single independent variable (predictor).\n\n-   **Equation:** y=β0+β1x+ϵ, where y is the dependent variable, x is the independent variable, β0​ is the intercept, β1​ is the slope, and ϵ is the error term\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\n# Load the mtcars dataset\ndata(mtcars)\n\n# Explore the dataset\nhead(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n```\n:::\n\n```{.r .cell-code}\nsummary(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      mpg             cyl             disp             hp       \n Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  \n 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  \n Median :19.20   Median :6.000   Median :196.3   Median :123.0  \n Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  \n 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  \n Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  \n      drat             wt             qsec             vs        \n Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  \n 1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  \n Median :3.695   Median :3.325   Median :17.71   Median :0.0000  \n Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  \n 3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  \n Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  \n       am              gear            carb      \n Min.   :0.0000   Min.   :3.000   Min.   :1.000  \n 1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  \n Median :0.0000   Median :4.000   Median :2.000  \n Mean   :0.4062   Mean   :3.688   Mean   :2.812  \n 3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  \n Max.   :1.0000   Max.   :5.000   Max.   :8.000  \n```\n:::\n\n```{.r .cell-code}\n# Scatter plot\nplot(mtcars$wt, mtcars$mpg, main=\"Scatter Plot\", xlab=\"Weight\", ylab=\"Miles Per Gallon\", col=\"blue\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Fit the linear regression model\nmodel <- lm(mpg ~ wt, data = mtcars)\n\n# Display the summary of the model\nsummary(model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = mpg ~ wt, data = mtcars)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-4.5432 -2.3647 -0.1252  1.4096  6.8727 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  37.2851     1.8776  19.858  < 2e-16 ***\nwt           -5.3445     0.5591  -9.559 1.29e-10 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 3.046 on 30 degrees of freedom\nMultiple R-squared:  0.7528,\tAdjusted R-squared:  0.7446 \nF-statistic: 91.38 on 1 and 30 DF,  p-value: 1.294e-10\n```\n:::\n\n```{.r .cell-code}\n# Visualize the regression line\n\n\nggplot(mtcars, aes(wt, mpg)) +\n  geom_point() +\n  stat_smooth(method = lm)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n:::\n\n\n## 2. Non-Linear Regression Models:\n\nLinear regression models assume a linear relationship between the independent variables and the dependent variable. However, in many real-world scenarios, the relationship may not be strictly linear. Non-linear regression models are used when the relationship between variables is better described by a non-linear equation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the mtcars dataset\ndata(mtcars)\n\n# Fit a quadratic non-linear regression model\nmodel <- lm(mpg ~ poly(hp, 2), data = mtcars)\n\n# Generate predicted values\npredictions <- predict(model, newdata = data.frame(hp = mtcars$hp))\n\n# Plot the data and non-linear regression curve\nplot(mtcars$hp, mtcars$mpg, main=\"Quadratic Non-Linear Regression\", xlab=\"Horsepower\", ylab=\"Miles Per Gallon\", col=\"blue\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(mtcars, aes(x = hp, y = mpg)) +\n  geom_point(color = \"blue\") +\n  \n  # Add a dashed line for the non-linear regression curve\n  geom_line(aes(y = predictions), color = \"red\") +\n   # Labels and title\n  labs(title = \"Quadratic Non-Linear Regression\",\n       x = \"Horsepower\",\n       y = \"Miles Per Gallon\") \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# Display the model summary\nsummary(model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = mpg ~ poly(hp, 2), data = mtcars)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-4.5512 -1.6027 -0.6977  1.5509  8.7213 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept)    20.091      0.544  36.931  < 2e-16 ***\npoly(hp, 2)1  -26.046      3.077  -8.464 2.51e-09 ***\npoly(hp, 2)2   13.155      3.077   4.275 0.000189 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 3.077 on 29 degrees of freedom\nMultiple R-squared:  0.7561,\tAdjusted R-squared:  0.7393 \nF-statistic: 44.95 on 2 and 29 DF,  p-value: 1.301e-09\n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}